Elm.Enemies = Elm.Enemies || {};
Elm.Enemies.make = function (_elm) {
   "use strict";
   _elm.Enemies = _elm.Enemies || {};
   if (_elm.Enemies.values) return _elm.Enemies.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Movement = Elm.Movement.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var getEnemyColor = function (x) {
      return _U.cmp(x,8) < 1 ? $Color.lightGreen : _U.cmp(x,16) < 1 ? $Color.lightBlue : _U.cmp(x,24) < 1 ? $Color.green : _U.cmp(x,
      32) < 1 ? $Color.blue : _U.cmp(x,40) < 1 ? $Color.lightOrange : _U.cmp(x,48) < 1 ? $Color.lightRed : _U.cmp(x,56) < 1 ? $Color.orange : $Color.red;
   };
   var getRandomY = function (seed) {    return A2($Random.generate,A2($Random.$float,0 - $Config.areaH / 2,$Config.areaH / 2),seed);};
   var getRandomX = function (seed) {    return A2($Random.generate,A2($Random.$float,0 - $Config.areaW / 2,$Config.areaW / 2),seed);};
   var Position = F2(function (a,b) {    return {x: a,y: b};});
   var Enemies = F2(function (a,b) {    return {enemies: a,seed: b};});
   var Enemy = F6(function (a,b,c,d,e,f) {    return {x: a,y: b,startPos: c,endPos: d,rad: e,color: f};});
   var enemiesState = {enemies: _U.list([A6(Enemy,50,50,{x: 1,y: 1},{x: 1,y: 1},10,$Color.yellow)]),seed: $Random.initialSeed(20)};
   var getEnemies = F3(function (numEnemies,size,enemiesState) {
      return A3($List.foldl,
      F2(function (x,_p0) {
         var _p1 = _p0;
         var _p2 = size;
         var minSize = _p2._0;
         var maxSize = _p2._1;
         var _p3 = getRandomX(_p1.seed);
         var randomStartX = _p3._0;
         var firstSeed = _p3._1;
         var _p4 = getRandomY(firstSeed);
         var randomStartY = _p4._0;
         var secondSeed = _p4._1;
         var _p5 = getRandomX(secondSeed);
         var randomEndX = _p5._0;
         var thirdSeed = _p5._1;
         var _p6 = getRandomY(thirdSeed);
         var randomEndY = _p6._0;
         var forthSeed = _p6._1;
         var _p7 = A2($Random.generate,A2($Random.$float,minSize,maxSize),forthSeed);
         var randomRad = _p7._0;
         var fifthSeed = _p7._1;
         var enemyColor = getEnemyColor(randomRad);
         var endPos = {x: randomEndX,y: randomEndY};
         var startPos = {x: randomStartX,y: randomStartY};
         var nextEnemies = A2($List.append,_p1.enemies,_U.list([A6(Enemy,randomStartX,randomStartY,startPos,endPos,randomRad,enemyColor)]));
         return {enemies: nextEnemies,seed: fifthSeed};
      }),
      enemiesState,
      A2($List.repeat,numEnemies,""));
   });
   var updateEnemyPos = F2(function (dt,_p8) {
      var _p9 = _p8;
      var _p13 = _p9.y;
      var _p12 = _p9.x;
      var _p11 = _p9.startPos;
      var _p10 = _p9.endPos;
      var newEndPos = _U.eq(_p12,$Config.areaW / 2) ? _p11 : _p10;
      var newStartPos = _U.eq(_p12,$Config.areaW / 2) ? _p10 : _p11;
      var newY = A2($Movement.isAtBorder,$Config.areaH,_p13) ? A4($Movement.invertPosition,dt,$Config.areaH,0,_p13) : A6($Movement.moveItem,
      $Config.enemySpeed,
      dt,
      $Config.areaH,
      {ctor: "_Tuple2",_0: _p10.y,_1: _p11.x},
      0,
      _p13);
      var newX = A2($Movement.isAtBorder,$Config.areaW,_p12) ? A4($Movement.invertPosition,dt,$Config.areaW,0,_p12) : A6($Movement.moveItem,
      $Config.enemySpeed,
      dt,
      $Config.areaW,
      {ctor: "_Tuple2",_0: _p10.x,_1: _p11.x},
      0,
      _p12);
      return A6(Enemy,newX,newY,newStartPos,newEndPos,_p9.rad,_p9.color);
   });
   return _elm.Enemies.values = {_op: _op
                                ,Enemy: Enemy
                                ,Enemies: Enemies
                                ,Position: Position
                                ,getRandomX: getRandomX
                                ,getRandomY: getRandomY
                                ,getEnemyColor: getEnemyColor
                                ,enemiesState: enemiesState
                                ,getEnemies: getEnemies
                                ,updateEnemyPos: updateEnemyPos};
};